// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: authzed/api/v1alpha1/schema.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on SchemaServiceReadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SchemaServiceReadRequest) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetObjectDefinitionNames() {
		_, _ = idx, item

		if len(item) > 128 {
			return SchemaServiceReadRequestValidationError{
				field:  fmt.Sprintf("ObjectDefinitionNames[%v]", idx),
				reason: "value length must be at most 128 bytes",
			}
		}

		if !_SchemaServiceReadRequest_ObjectDefinitionNames_Pattern.MatchString(item) {
			return SchemaServiceReadRequestValidationError{
				field:  fmt.Sprintf("ObjectDefinitionNames[%v]", idx),
				reason: "value does not match regex pattern \"^([a-z][a-z0-9_]{2,62}[a-z0-9]/)?[a-z][a-z0-9_]{2,62}[a-z0-9]$\"",
			}
		}

	}

	return nil
}

// SchemaServiceReadRequestValidationError is the validation error returned by
// SchemaServiceReadRequest.Validate if the designated constraints aren't met.
type SchemaServiceReadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SchemaServiceReadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SchemaServiceReadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SchemaServiceReadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SchemaServiceReadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SchemaServiceReadRequestValidationError) ErrorName() string {
	return "SchemaServiceReadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SchemaServiceReadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSchemaServiceReadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SchemaServiceReadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SchemaServiceReadRequestValidationError{}

var _SchemaServiceReadRequest_ObjectDefinitionNames_Pattern = regexp.MustCompile("^([a-z][a-z0-9_]{2,62}[a-z0-9]/)?[a-z][a-z0-9_]{2,62}[a-z0-9]$")

// Validate checks the field values on SchemaServiceReadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SchemaServiceReadResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// SchemaServiceReadResponseValidationError is the validation error returned by
// SchemaServiceReadResponse.Validate if the designated constraints aren't met.
type SchemaServiceReadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SchemaServiceReadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SchemaServiceReadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SchemaServiceReadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SchemaServiceReadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SchemaServiceReadResponseValidationError) ErrorName() string {
	return "SchemaServiceReadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SchemaServiceReadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSchemaServiceReadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SchemaServiceReadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SchemaServiceReadResponseValidationError{}

// Validate checks the field values on SchemaServiceWriteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SchemaServiceWriteRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetImplicitPermissionsSystem()) > 128 {
		return SchemaServiceWriteRequestValidationError{
			field:  "ImplicitPermissionsSystem",
			reason: "value length must be at most 128 bytes",
		}
	}

	if !_SchemaServiceWriteRequest_ImplicitPermissionsSystem_Pattern.MatchString(m.GetImplicitPermissionsSystem()) {
		return SchemaServiceWriteRequestValidationError{
			field:  "ImplicitPermissionsSystem",
			reason: "value does not match regex pattern \"^([a-z][a-z0-9_]{2,62}[a-z0-9]/)?[a-z][a-z0-9_]{2,62}[a-z0-9]$\"",
		}
	}

	if len(m.GetObjectDefinitions()) < 1 {
		return SchemaServiceWriteRequestValidationError{
			field:  "ObjectDefinitions",
			reason: "value must contain at least 1 item(s)",
		}
	}

	return nil
}

// SchemaServiceWriteRequestValidationError is the validation error returned by
// SchemaServiceWriteRequest.Validate if the designated constraints aren't met.
type SchemaServiceWriteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SchemaServiceWriteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SchemaServiceWriteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SchemaServiceWriteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SchemaServiceWriteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SchemaServiceWriteRequestValidationError) ErrorName() string {
	return "SchemaServiceWriteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SchemaServiceWriteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSchemaServiceWriteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SchemaServiceWriteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SchemaServiceWriteRequestValidationError{}

var _SchemaServiceWriteRequest_ImplicitPermissionsSystem_Pattern = regexp.MustCompile("^([a-z][a-z0-9_]{2,62}[a-z0-9]/)?[a-z][a-z0-9_]{2,62}[a-z0-9]$")

// Validate checks the field values on SchemaServiceWriteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SchemaServiceWriteResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// SchemaServiceWriteResponseValidationError is the validation error returned
// by SchemaServiceWriteResponse.Validate if the designated constraints aren't met.
type SchemaServiceWriteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SchemaServiceWriteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SchemaServiceWriteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SchemaServiceWriteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SchemaServiceWriteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SchemaServiceWriteResponseValidationError) ErrorName() string {
	return "SchemaServiceWriteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SchemaServiceWriteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSchemaServiceWriteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SchemaServiceWriteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SchemaServiceWriteResponseValidationError{}
